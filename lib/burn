#!/bin/bash

What=burn
Tmp="/tmp/$USER/$What/tmp"
Doc="$HOME/opt/lua/$What/doc"

# the -> lib ------------------> btree--\          
#         \                              \
#          \-> thing -> csv --> data--> dtree
#
#


hello() { cat<<EOF	
${red}$What = multi-objective rule generation
v0.1 (c) 2018, Tim Menzies, BSD 2-clause license${white}
EOF
}
copyright() { hello; cat <<EOF
All rights reserved.

Copyright (c) 2018, Tim Menzies
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOF
}

mkdir -p $Tmp $Doc

cat<<EOF>$Tmp/vimrc
	colorscheme pablo 
        set backupdir-=.
	set backupdir^=~/tmp,/tmp
	set nocompatible              " required
	filetype plugin indent on
	set modelines=3
	set scrolloff=3
	set autoindent
	set hidden "remember ls
	set wildmenu
	set wildmode=list:longest
	set visualbell
	set ttyfast
	set backspace=indent,eol,start
	set laststatus=2
	set splitbelow
	set mouse=a
	set title
	set nonumber
	autocmd BufEnter * cd %:p:h
	set showmatch
	set matchtime=15
	set background=light
	set syntax=on
	syntax enable
	set ignorecase
	set incsearch
	set smartcase
	set showmatch
	set hlsearch
	set hlsearch!
	nnoremap <F3> :set hlsearch!<CR>
	set ruler
	set formatoptions+=cro
	set rtp+=~/.vim/bundle/Vundle.vim
	call vundle#begin()
	Plugin 'gmarik/Vundle.vim'
	" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
	Plugin 'scrooloose/nerdtree'
       	Plugin 'vim-airline/vim-airline-themes'
	Plugin 'croaker/mustang-vim'
	Plugin 'dracula/vim'
	Plugin 'phd'
	Plugin 'arcticicestudio/nord-vim'
	Plugin 'junegunn/seoul256.vim'
	Plugin 'Zenburn'
	" All of your Plugins must be added before the following line
	call vundle#end()            " required
	filetype plugin indent on    " required
	autocmd VimEnter * NERDTree
	autocmd VimEnter * wincmd w
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
	"colorscheme seoul256
	colorscheme delek
	set fillchars+=vert:\ 
	hi CursorLine cterm=NONE ctermbg=NONE ctermfg=white
	hi VertSplit ctermfg=Black ctermbg=Black
	set mouse+=a
	if &term =~ '^screen'
		    " tmux knows the extended mouse mode
		        set ttymouse=xterm2
		endif
EOF
vim0() {
  if  [ ! -d "$HOME/.vim/bundle/Vundle.vim" ]; then
    git clone https://github.com/VundleVim/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
  fi
  vim -u $Tmp/vimrc -c 'PluginInstall' -c 'qa!'
}

if [ ! -f "../.gitignore" ]; then
	cat <<-EOF> ../.gitignore
	tags
	
	# Compiled Lua sources
	luac.out
	
	# luarocks build files
	*.src.rock
	*.zip
	*.tar.gz
	
	# LUA Object files
	*.o
	*.os
	*.ko
	*.obj
	*.elf
	
	# LUA Precompiled Headers
	*.gch
	*.pch
	
	# LUA Libraries
	*.lib
	*.a
	*.la
	*.lo
	*.def
	*.exp
	
	# LUA Shared objects (inc. Windows DLLs)
	*.dll
	*.so
	*.so.*
	*.dylib
	
	# LUA Executables
	*.exe
	*.out
	*.app
	*.i*86
	*.x86_64
	*.hex
	
	# VIM Swap
	[._]*.s[a-v][a-z]
	[._]*.sw[a-p]
	[._]s[a-rt-v][a-z]
	[._]ss[a-gi-z]
	[._]sw[a-p]
	
	# VIM Session
	Session.vim
	
	# VIM Temporary
	.netrwhist
	*~
	# VIM Auto-generated tag files
	tags
	# VIM Persistent undo
	[._]*.un~
	EOF
	git add ../.gitignore
fi

banner() { cat <<-EOF

          (               | Learning is not the filling 
         ( ,)             | a pail, but the lighting
        ). ( )            | of a fire.
       (, )' (.
      \WWWWWWWW/
       '--..--'           | $What, v0.1
          }{              | http://tiny.cc/burning
          {}

EOF
}

ltyl=$(tput setaf 11)
white=$(tput setaf 15)
red=$(tput setaf 1)
help() {
  hello
  echo -n $ltyl; banner; echo -n $white
  cat<<-EOF
	./$What FILE.lua    run FILE.lua
	./$What ok FILE.lua run FILE.lua
	./$What ed0 	    install/update any VIM plugs (call once before using "ed")
	./$What ed FILE	    edit FILE 
	./$What eds 	    edit all *.lua in VIM tab mode 
	./$What okay 	    run all tests
	./$What zap 	    delete generated files (forces recompile)
	./$What pull	    get from git
	./$What push	    send back to git
	./$What license	    show license
	./$What help	    show help

	Note that this code cannot load any X.lua file for
	X in ed, okay, zap, pull, push, license, help. 
	EOF
}

if [ -z "$1" ]; then
  hello
  echo
  echo "Type './$What help' for a list of options"
else
  x=$1
  shift
  if   [[ "$x" == "ed"       ]]; then vim -u $Tmp/vimrc -p  $1 lib.lua 
  elif [[ "$x" == "eds"      ]]; then cd ..; vim  -u $Tmp/vimrc 
  elif [[ "$x" == "ed0"      ]]; then vim0
  elif [[ "$x" == "ok"       ]]; then luajit ../tests/${1}ok.lua
  elif [[ "$x" == "zap"      ]]; then rm -f $Doc/*.md
  elif [[ "$x" == "pull"     ]]; then git pull
  elif [[ "$x" == "help"     ]]; then help
  elif [[ "$x" == "license"  ]]; then copyright
  elif [[ "$x" == "okay"     ]]; then luajit tests.lua
  elif [[ "$x" == "annotate" ]]; then (cd ../../burn.github.io; make)
  elif [[ "$x" == "push"     ]]; then
     git status
     git commit -am "$(date +"Committed %D")"
     git push
  else
    luajit $x
  fi
fi
